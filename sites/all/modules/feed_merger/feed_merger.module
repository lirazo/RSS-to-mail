<?php

define('FEED_MERGER_DEFAULT_URL', 'http://example.net/rss.xml');

//TODO interface avec feedburner (cf module feedburner)
//TODO créer le content-type 'feed' dans le module + la view aussi (utiliser module 'feature' pour exporter tout ça ?)
//TODO utiliser job_scheduler pour scheduler le bouzin ?
//TODO hardening => supprimer dépendances de modules inutiles
//TODO watchdog
//TODO have feeds published on a Twitter account

/**
 * Implementation of hook_theme
 */
function feed_merger_theme() {
  return array(
    'feed_merger_items_email' => array(
      'template' => 'feed-items-email',
      'variables' => array('feeds' => NULL)
    )
  );
}

function _feed_merger_get_feeds($uid) {
  $feeds = entity_load('node', FALSE, array(
    'type' => 'feed',
    'uid' => $uid
  ));
  return $feeds;
}

function _feed_merger_get_feed_items($feed) {
  $xmlUrl = $feed->field_url['und'][0]['url'];
  $xmlData = drupal_http_request($xmlUrl)->data;
  $xmlObject = simplexml_load_string($xmlData);
  //TODO controle XML bien formé ? voir si fourni dans simplexml
  $feedItems = array();
  $feedTitle = (string) $xmlObject->channel->title;
  foreach($xmlObject->channel->item as $item) {
    $feedItems[] = array(
      'feedTitle' => $feedTitle,
      'title' => (string) $item->title,
      'link' => (string) $item->link,
      'description' => (string) $item->description,
      'pubDate' => format_date(strtotime($item->pubDate), 'custom', 'D, d/m/Y H:i'),
    );
  }
  //TODO vérifier specs RSS + autres types de feeds
  return $feedItems;
}

/**
 * Implementation of hook_mail
 */
function feed_merger_mail($key, &$message, $params) {
  switch($key) {
    case 'feed_items':
      $message['subject'] = t('Feeds for ')
        . $params['user']->name
        . ' - '
        . format_date(time(), 'custom', 'd/m/Y - H:i');
      $message['body'][] = $params['feed_items'];
      break;
  }
}

//TODO US-formatted dates when using format_date + the browser is US

/**
 * Implementation of hook_mail_alter
 */
function feed_merger_mail_alter(&$message) {
  $headers = array(
    'MIME-Version' => '1.0',
    'Content-Type' => 'text/html; charset=UTF-8; format=flowed',
    'Content-Transfer-Encoding' => '8Bit',
    'X-Mailer' => 'Drupal'
  );
  foreach($headers as $key=>$value) {
    $message['headers'][$key] = $value;
  }
}

/**
 * Implementation of hook_cron
 */
function feed_merger_cron() {
  $users = entity_load('user');
  foreach($users as $user) {
    $feedNodes = _feed_merger_get_feeds($user->uid);
    if(!empty($feedNodes)) { //TODO watchdog si $feeds is empty ?
      $feeds = array();
      foreach($feedNodes as $feedNode) {
        $feeds[$feedNode->nid] = array(
          'title' => $feedNode->title,//TODO sanitize title ? XSS
          'items' => _feed_merger_get_feed_items($feedNode),
        );
      }
      $output = theme('feed_merger_items_email', array('feeds' => $feeds));
      drupal_mail('feed_merger', 'feed_items', $user->mail, language_default(), array(
        'feed_items' => $output,
        'user' => $user
      ));
    }
    //TODO sort feedItems par pubDate
    //TODO check_xss dans un preprocess ? (cf drupal.org/node/933976)
  }
}

//TODO permettre de choisir d'afficher seulement le titre, d'ajouter un summary au début, de trier par date ou par source

/**
 *  Implementation of hook_enable
 */
function feed_merger_enable() {
  //HTML implementation of MailSystem to be used when sending mails from this module
  $mailSystem = variable_get('mail_system', array('default-system' => 'DefaultMailSystem'));
  $mailSystem = array_merge($mailSystem, array('feed_merger' => 'HTMLMailSystem'));
  variable_set('mail_system', $mailSystem);
}

/**
 * Implementation of hook_disable
 */
function feed_merger_disable() {
  //Remove use of HTML implementation of MailSystem from this module
  $mailSystem = variable_get('mail_system', array('default-system' => 'DefaultMailSystem'));
  unset($mailSystem['feed_merger']);
  variable_set('mail_system', $mailSystem);
}

//TODO mettre une UI pour fixer la langue de l'utilisateur lors de son inscription
//TODO unsubscribe link (footer of mail)
//TODO define 'feed' content type in this module

/**
 * Implementation of hook_menu
 */
function feed_merger_menu() {
  $items['feeds/add'] = array(
    'page callback' => '_feed_merger_add',
    'access arguments' => array('access content'),
  );
  return $items;
}

function _feed_merger_add_form_validate($form, $form_state) {
  if(!filter_var($form_state['values']['email'], FILTER_VALIDATE_EMAIL)) {
    form_set_error('email', t('Invalid email address'));
  }
}

function _feed_merger_add_form_submit($form, &$form_state) {
  //TODO
}

function _feed_merger_add_form() {
  //TODO check anti-CSRF token here
  $form['url'] = array(
    '#type' => 'textfield',
    '#title' => t('Feed URL'),
    '#default_value' => FEED_MERGER_DEFAULT_URL,
  );
  global $user;
  if($user->uid != 0) {//TODO !=
    $form['email'] = array(
      '#type' => 'textfield',
      '#title' => t('Email'),
    );
    $form['password'] = array(
      '#type' => 'password',
      '#title' => t('Password'),
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add to my feed list'),
  );
  //TODO checkbox 'remember me'
  return $form;
}

function _feed_merger_add() {
  return drupal_get_form('_feed_merger_add_form');
}
