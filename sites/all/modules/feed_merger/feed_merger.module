<?php

define('FEED_MERGER_DEFAULT_URL', 'http://example.net/rss.xml');
define('FEED_MERGER_HOME_PATH', 'feeds');
define('FEED_MERGER_WATCHDOG_TAG', 'feed merger');

/**
 * Implementation of hook_theme
 */
function feed_merger_theme() {
  return array(
    'feed_merger_items_email' => array(
      'template' => 'templates/feed-items-email',
      'variables' => array('feeds' => NULL, 'unsubscribe' => NULL)
    )
  );
}

/**
 * Returns the feed list a user has subscribed to
 * @param account user
 * @return array of feeds
 */
function _feed_merger_get_feeds($account) {
  $feeds = entity_load('node', FALSE, array(
    'type' => 'feed',
    'uid' => $account->uid,
  ));
  return $feeds;
}

/**
 * Determines whether the user has subscribed to a feedURL
 * @param feedURL feed URL
 * @return TRUE if the user has subscribed to the feed ; FALSE if not
 */
function _feed_merger_user_has_feed($feedURL) {
  global $user;
  $query = new EntityFieldQuery();
  $countFeeds = $query->entityCondition('entity_type', 'node')
  ->propertyCondition('type', 'feed')
  ->propertyCondition('uid', $user->uid)
  ->fieldCondition('field_link', 'url', $feedURL)
  ->count()
  ->execute();
  return !empty($countFeeds);
}

function _feed_merger_get_feed_items($feed) {
  $xmlUrl = $feed->field_link[LANGUAGE_NONE][0]['url'];
  $xmlData = drupal_http_request($xmlUrl)->data;
  $xmlObject = simplexml_load_string($xmlData);
  $feedItems = array();
  foreach($xmlObject->channel->item as $item) {
    $feedItems[] = array(
      'feedTitle' => filter_xss($xmlObject->channel->title),
      'title' => filter_xss($item->title),
      'link' => filter_xss($item->link),
      'description' => filter_xss($item->description),
      'pubDate' => format_date(strtotime($item->pubDate), 'custom', 'D, d/m/Y H:i'),
    );
  }
  return $feedItems;
}

/**
 * Implementation of hook_mail
 */
function feed_merger_mail($key, &$message, $params) {
  switch($key) {
    case 'feed_items':
      $message['subject'] = t('Feeds for @username - @datetime', array(
        '@username' => $params['user']->name,
        '@datetime' => format_date(time(), 'custom', 'd/m/Y - H:i'),
      ));
      $message['body'][] = $params['feed_items'];
      break;
  }
}

/**
 * Implementation of hook_mail_alter
 */
function feed_merger_mail_alter(&$message) {
  $headers = array(
    'MIME-Version' => '1.0',
    'Content-Type' => 'text/html; charset=UTF-8; format=flowed',
    'Content-Transfer-Encoding' => '8Bit',
    'X-Mailer' => 'Drupal'
  );
  foreach($headers as $key=>$value) {
    $message['headers'][$key] = $value;
  }
}

/**
 * Implementation of hook_cron
 */
function feed_merger_cron() {
  $accounts = entity_load('user');
  foreach($accounts as $account) {
    $feedNodes = _feed_merger_get_feeds($account);
    if(empty($feedNodes)) {
      //user's feed list is empty
      watchdog(
        FEED_MERGER_WATCHDOG_TAG,
        'User !uid has an empty feed list. No mail sent.',
        array('!uid' => $account->uid),
        WATCHDOG_INFO
      );
    } else {
      $feeds = array();
      foreach($feedNodes as $feedNode) {
        $feeds[$feedNode->nid] = array(
          'title' => filter_xss($feedNode->title),
          'items' => _feed_merger_get_feed_items($feedNode),
        );
      }
      $unsubscribe = l(t('Unsubscribe'), 'user/' . $account->uid . '/cancel', array('attributes' => array('title' => t('Unsubscribe'))));
      $output = theme('feed_merger_items_email', array('feeds' => $feeds, 'unsubscribe' => $unsubscribe));
      drupal_mail('feed_merger', 'feed_items', $account->mail, language_default(), array(
        'feed_items' => $output,
        'user' => $account
      ));
    }
  }
}

/**
 *  Implementation of hook_enable
 */
function feed_merger_enable() {
  //HTML implementation of MailSystem to be used when sending mails from this module
  $mailSystem = variable_get('mail_system', array('default-system' => 'DefaultMailSystem'));
  $mailSystem = array_merge($mailSystem, array('feed_merger' => 'HTMLMailSystem'));
  variable_set('mail_system', $mailSystem);
}

/**
 * Implementation of hook_disable
 */
function feed_merger_disable() {
  //Remove use of HTML implementation of MailSystem from this module
  $mailSystem = variable_get('mail_system', array('default-system' => 'DefaultMailSystem'));
  unset($mailSystem['feed_merger']);
  variable_set('mail_system', $mailSystem);
}

/**
 * Implementation of hook_node_validate
 */
function feed_merger_node_validate($node, $form, &$form_state) {
  if($node->type == 'feed') {
    $feedURL = $node->field_link[LANGUAGE_NONE][0]['url'];
    if(_feed_merger_user_has_feed($feedURL)) {
      form_set_error('url', t('Feed %url is already in your list. ', array('%url' => $feedURL)));
    }
  }
}

/**
 * Implementation of hook_user_update
 */
function feed_merger_user_update(&$edit, $account, $category = NULL) {
  //update username accordingly with email upon modification of the latter
  email_registration_user_insert($edit, $account, $category);
}

/*****************************************************************************************
 * 'Add feed' form
 *****************************************************************************************/

function _feed_merger_add_feed_form_validate($form, $form_state) {
  $feedURL = $form_state['values']['url'];
  if(!empty($feedURL)) {
    try {
      Feed::loadRss($feedURL);
    } catch(Exception $e) {
      form_set_error('url', t('Invalid feed %url', array('%url' => $feedURL)));
    }
  }
}

function _feed_merger_add_feed_form_submit($form, &$form_state) {
  $feedURL = $form_state['values']['url'];
  if(!empty($feedURL)) {
    global $user;
    $feedNode = new StdClass();
    $feedNode->uid = $user->uid;
    $feedNode->type = 'feed';
    $feedNode->title = Feed::loadRss($feedURL)->title;
    $feedNode->field_link[LANGUAGE_NONE][]['url'] = $feedURL;
    node_object_prepare($feedNode);
    node_validate($feedNode, $form, $form_state);
    $errors = form_get_errors();
    if(empty($errors)) {
      node_save($feedNode);
      drupal_set_message(t('Successfully added %url to your feed list.', array('%url' => $feedURL)));
    }
  }
}

function _feed_merger_add_feed_form() {
  $form['url'] = array(
    '#type' => 'textfield',
    '#title' => t('Feed URL'),
    '#default_value' => FEED_MERGER_DEFAULT_URL,
    '#weight' => -10,
  );
  $form['actions'] = array(
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Add to my feed list'),
    )
  );
  return $form;
}

/*****************************************************************************************
 * 'Login and add feed' form
 *****************************************************************************************/
function _feed_merger_login_add_feed_form_validate($form, &$form_state) {
  /*
  if(!filter_var($form_state['values']['mail'], FILTER_VALIDATE_EMAIL)) {
    form_set_error('mail', t('Invalid email address.'));
  }
  if(mb_strlen($form_state['values']['pass']) < FEED_MERGER_PASSWORD_MIN_SIZE) {
    form_set_error('pass', t('Password size should have at least @pwd-size characters.', array('@pwd-size' => FEED_MERGER_PASSWORD_MIN_SIZE)));
  }
  */
  //drupal_validate_form('_feed_merger_add_feed_form', $form, $form_state);FIXME this line should be required
  email_registration_user_login_validate($form, $form_state);
}

/**
 * Programatically creates a new user
 * @param mail email
 * @param pass password
 * @return user newly created
 */
function _feed_merger_create_user($mail, $pass) {
  $edit['name'] = user_password();
  $edit['mail'] = $mail;
  $edit['pass'] = $pass;
  $edit['status'] = 1;
  return user_save(NULL, $edit);
}

function _feed_merger_get_username($mail) {
  return db_query('SELECT name from {users} WHERE LOWER(mail) = LOWER(:mail)', array(':mail' => $mail))->fetchField();
}

function _feed_merger_login_user($mail, $pass) {
  $name = _feed_merger_get_username($mail);
  if($uid = user_authenticate($name, $pass)) {
    global $user;
    $user = user_load($uid);
    user_login_finalize();
    return $uid;
  } else {
    return FALSE;
  }
}

function _feed_merger_login_add_feed_form_submit($form, &$form_state) {
  $mail = $form_state['values']['mail'];
  $pass = $form_state['values']['pass'];
  if(!user_load_by_mail($mail)) {
    _feed_merger_create_user($mail, $pass);
    drupal_set_message(t('Successfully created user %user.', array('%user' => $mail)));
  }
  if(_feed_merger_login_user($mail, $pass)) {
    drupal_form_submit('_feed_merger_add_feed_form', $form_state);
    drupal_goto();
  } else {
    form_set_error('pass', t('Username and password don\'t match. <a href="@password">Have you forgotten your password ?</a>', array('@password' => url('user/password'))));
  }
}

function _feed_merger_login_add_feed_form() {
  $form['mail'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#required' => TRUE,
  );
  $form['pass'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
    '#required' => TRUE,
  );
  $form['signin'] = array(
    '#type' => 'link',
    '#prefix' => t('Already have an account ?') . ' ',
    '#title' => t('Sign in'),
    '#href' => 'user',
    '#weight' => 10,
  );
  return array_merge($form, _feed_merger_add_feed_form());
}

//TODO configure Twitter callback URL when put online + have feeds published on a Twitter account
//TODO Create new account with Twitter
//TODO simpletest - add user / add feed / add feed+login / Internet unreachable / malformed RSS / unsubscribe link / receive mail
//TODO only send *new* mails (ie check pubDate or maintain a list of sent items)
//TODO publish on Twitter

/*
 * Extra features (bonuses)
 */
//TODO permettre de choisir d'afficher seulement le titre, d'ajouter un summary au d√©but, de trier par date ou par source
//TODO sort feedItems par pubDate dans la cron()
//TODO watchdog
//TODO US-formatted dates when using format_date + the browser is US +  mettre une UI pour fixer la langue de l'utilisateur lors de son inscription
//TODO below feeds list: add checkbox "send me a daily digest when my feeds get updated"

